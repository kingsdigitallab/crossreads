import { AnyFileSystem } from "./any-file-system.mjs";

const STATS_PATH = 'app/stats.json'
const SESSION_KEY = 'AvailableTags.tags'

export class AvailableTags {
  /*
  Keep a dynamic list of unique tags available for marking annotations.

  load() a list of annotation tags from:
  . a index file (generated by regular indexing script)
  . window.localStorage if run from within a browser

  addTag(tag) to the list

  saveToSession(): to save the list in the browser session
  */

  constructor() {
    this._tags = []
  }

  addTag(tag) {
    tag = (tag || '').trim()
    if (!tag || this._tags[tag]) return;
    this._tags[tag] = new Date().toISOString()
    this.saveToSession()
    return tag
  }

  get tags() {
    return Object.keys(this._tags).sort()
  }

  getTagFormatError(tag, appliedTags=null) {
    let ret = '';
    tag = (tag || '').trim()
    if (tag) {
      if (!tag.match(/^[a-z0-9.-]+$/)) {
        ret = 'Please only use digits, lowercase alphabet, - and .'
      } else {
        if (!tag.match(/[a-z0-9]$/)) {
          ret = 'Please end with a digit or letter.'
        }
        if (!ret && !tag.match(/^[a-z0-9]/)) {
          ret = 'Please start with a digit or letter.'
        }
        if (!ret && tag.match(/[^a-z0-9]{2}/)) {
          ret = 'Please surround each . or - with letters or digits.'
        }
        if (!ret && (appliedTags || []).includes(tag)) {
          ret = 'This tag is already applied.'
        }
      }
    }
    return ret
  }

  async load() {
    // union b/w tags from session & file
    this._tags = this._loadFromSession()
    let stats = await this._loadStats()
    if (stats) {
      const statsDate = stats.meta['dc:modified']

      // console.log(JSON.stringify(this._tags))
      // remove all unused session tags 
      for (const [t, d] of Object.entries(this._tags)) {
        if (!stats.data['t'][t] && d < statsDate) {
          console.log(`DELETE ${t}`)
          delete this._tags[t]
        }
      }
      // add all tags from the index
      for (let t of Object.keys(stats.data['t'])) {
        this._tags[t] = statsDate
      }
    }

    return !!stats
  }

  async _loadStats() {
    let res = null
    let afs = new AnyFileSystem()
    res = await afs.readJson(STATS_PATH)
    res = res?.ok ? res.data : null
    return res
  }

  _loadFromSession() {
    const defaultDate = "2000-01-01T01:01:01.070Z"
    let ret = JSON.parse(window.localStorage.getItem(SESSION_KEY) || '{}')
    if (ret.constructor === Array) {
      let tags = ret
      ret = {}
      for (let t of tags) {
        ret[t] = defaultDate
      }
    }
    return ret
  }

  saveToSession() {
    window.localStorage.setItem(SESSION_KEY, JSON.stringify(this._tags))
  }

}
